// seven segment code with 27 bit counter and case statement //
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_unsigned.ALL;

entity seven_segment is
port(clk,clear : in std_logic;
     enable : out std_logic_vector(7 downto 0);
     ssd_out : out std_logic_vector(6 downto 0));
end seven_segment;

architecture Behavioral of seven_segment is

signal counter : std_logic_vector(26 downto 0):=(others=>'0');
signal clk_out : std_logic;
signal value : std_logic_vector(3 downto 0):=(others=>'0');
signal counter_2 : std_logic_vector(3 downto 0);
-------------------------------------------------------counter
begin
process(clk,clear)
begin
if clear='0' then
counter <= (others=>'0');
elsif(rising_edge(clk) and clear='1') then
     counter<= counter+1;
	  enable <= "01111111";
   end if;
end process;	

clk_out<=counter(26);
--------------------------------------mod 10 counter
process(clk_out,clear)
begin
if clear='0' then
value<=(others=>'0');
elsif(rising_edge(clk_out) and clear='1') then
     value<=value+1;
	  if(value="1001") then 
	  value<="0000";
	 end if;
 end if;
end process;
---------------------------------------------------ssd
counter_2<=value;

process(counter_2)
begin

case counter_2 is
when "0000" => ssd_out <="0000001";-- 0
when "0001" => ssd_out <="1001111";-- 1
when "0010" => ssd_out <="0010010";-- 2
when "0011" => ssd_out <="0000110";-- 3
when "0100" => ssd_out <="1001100";-- 4
when "0101" => ssd_out <="0100100";-- 5
when "0110" => ssd_out <="0100000";-- 6
when "0111" => ssd_out <="0001111";-- 7
when "1000" => ssd_out <="0000000";-- 8
when "1001" => ssd_out <="0000100";-- 9
when others => ssd_out <="0110000";

end case;
end process; 
end Behavioral;

